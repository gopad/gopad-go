// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new team API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for team API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppendTeamToUser(params *AppendTeamToUserParams, opts ...ClientOption) (*AppendTeamToUserOK, error)

	CreateTeam(params *CreateTeamParams, opts ...ClientOption) (*CreateTeamOK, error)

	DeleteTeam(params *DeleteTeamParams, opts ...ClientOption) (*DeleteTeamOK, error)

	DeleteTeamFromUser(params *DeleteTeamFromUserParams, opts ...ClientOption) (*DeleteTeamFromUserOK, error)

	ListTeamUsers(params *ListTeamUsersParams, opts ...ClientOption) (*ListTeamUsersOK, error)

	ListTeams(params *ListTeamsParams, opts ...ClientOption) (*ListTeamsOK, error)

	PermitTeamUser(params *PermitTeamUserParams, opts ...ClientOption) (*PermitTeamUserOK, error)

	ShowTeam(params *ShowTeamParams, opts ...ClientOption) (*ShowTeamOK, error)

	UpdateTeam(params *UpdateTeamParams, opts ...ClientOption) (*UpdateTeamOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AppendTeamToUser assigns a user to team
*/
func (a *Client) AppendTeamToUser(params *AppendTeamToUserParams, opts ...ClientOption) (*AppendTeamToUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppendTeamToUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppendTeamToUser",
		Method:             "POST",
		PathPattern:        "/teams/{team_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppendTeamToUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppendTeamToUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppendTeamToUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateTeam creates a new team
*/
func (a *Client) CreateTeam(params *CreateTeamParams, opts ...ClientOption) (*CreateTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateTeam",
		Method:             "POST",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteTeam deletes a specific team
*/
func (a *Client) DeleteTeam(params *DeleteTeamParams, opts ...ClientOption) (*DeleteTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTeam",
		Method:             "DELETE",
		PathPattern:        "/teams/{team_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteTeamFromUser removes a user from team
*/
func (a *Client) DeleteTeamFromUser(params *DeleteTeamFromUserParams, opts ...ClientOption) (*DeleteTeamFromUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamFromUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteTeamFromUser",
		Method:             "DELETE",
		PathPattern:        "/teams/{team_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTeamFromUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTeamFromUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteTeamFromUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListTeamUsers fetches all users assigned to team
*/
func (a *Client) ListTeamUsers(params *ListTeamUsersParams, opts ...ClientOption) (*ListTeamUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTeamUsers",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTeamUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTeamUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListTeams fetches all available teams
*/
func (a *Client) ListTeams(params *ListTeamsParams, opts ...ClientOption) (*ListTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTeams",
		Method:             "GET",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTeamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTeamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTeamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PermitTeamUser updates user perms for team
*/
func (a *Client) PermitTeamUser(params *PermitTeamUserParams, opts ...ClientOption) (*PermitTeamUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPermitTeamUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PermitTeamUser",
		Method:             "PUT",
		PathPattern:        "/teams/{team_id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PermitTeamUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PermitTeamUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PermitTeamUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ShowTeam fetches a specific team
*/
func (a *Client) ShowTeam(params *ShowTeamParams, opts ...ClientOption) (*ShowTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShowTeam",
		Method:             "GET",
		PathPattern:        "/teams/{team_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ShowTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateTeam updates a specific team
*/
func (a *Client) UpdateTeam(params *UpdateTeamParams, opts ...ClientOption) (*UpdateTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTeam",
		Method:             "PUT",
		PathPattern:        "/teams/{team_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTeamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTeamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTeamDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
